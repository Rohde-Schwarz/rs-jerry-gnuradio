/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(rs_jerry.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(e7b7b327280dfd1d8d50230b99f55f4e)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/msr4/rs_jerry.h>
// pydoc.h is automatically generated in the build directory
#include <rs_jerry_pydoc.h>

void bind_rs_jerry(py::module& m)
{

    using rs_jerry    = ::gr::msr4::rs_jerry;


    py::class_<rs_jerry, gr::sync_block, gr::block, gr::basic_block,
        std::shared_ptr<rs_jerry>>(m, "rs_jerry", D(rs_jerry))

        .def(py::init(&rs_jerry::make),
           py::arg("ip_addr"),
           py::arg("user"),
           py::arg("password"),
           py::arg("rx_channel"),
           py::arg("port"),
           py::arg("dest_addr"),
           py::arg("protocol"),
           py::arg("sat_frequency"),
           py::arg("down_frequency"),
           py::arg("bandwidth_analysis_bandwidth"),
           py::arg("port_id"),
           py::arg("norm"),
           D(rs_jerry,make)
        )
        



        ;

    py::enum_<::gr::msr4::RxChannel>(m,"RxChannel")
        .value("Rx1", ::gr::msr4::RxChannel::Rx1) // 0
        .value("Rx2", ::gr::msr4::RxChannel::Rx2) // 1
        .value("Rx3", ::gr::msr4::RxChannel::Rx3) // 2
        .value("Rx4", ::gr::msr4::RxChannel::Rx4) // 3
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::msr4::RxChannel>();
    py::enum_<::gr::msr4::Protocol>(m,"Protocol")
        .value("HRZR", ::gr::msr4::Protocol::HRZR) // 0
        .value("AMMOS", ::gr::msr4::Protocol::AMMOS) // 1
        .export_values()
    ;

    py::implicitly_convertible<int, ::gr::msr4::Protocol>();



}








